require_relative '../../spec_helper'
require 'json'

describe Cyclonedx::ReportNodeModules do
  describe "#run" do
    it 'should report all the deps in the package.json if both\
        package-lock.json and yarn.lock files do not exist' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "bom-ref": "pkg:npm/%40nerv-hq/control-system",
            "type": "library",
            "group": "",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system",
            "properties": [
              {
                "key": "source",
                "value": "https://npm.hq.nerv.net"
              },
              {
                "key": "dependency_file",
                "value": "package.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/%40magi-core/prediction",
            "type": "library",
            "group": "",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction",
            "properties": [
              {
                "key": "source",
                "value": "https://npm.magi.nerv.net"
              },
              {
                "key": "dependency_file",
                "value": "package.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/classnames",
            "type": "library",
            "group": "",
            "name": "classnames",
            "version": "^2.2.5",
            "purl": "pkg:npm/classnames",
            "properties": [
              {
                "key": "source",
                "value": "<package manager default>"
              },
              {
                "key": "dependency_file",
                "value": "package.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/mobx",
            "type": "library",
            "group": "",
            "name": "mobx",
            "version": "^3.2.1",
            "purl": "pkg:npm/mobx",
            "properties": [
              {
                "key": "source",
                "value": "<package manager default>"
              },
              {
                "key": "dependency_file",
                "value": "package.json"
              }
            ]
          }
        ]
      )
    end

    it 'should report all the deps in the package-lock.json if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "bom-ref": "pkg:npm/%40nerv-hq/control-system@1.2.3",
            "type": "library",
            "group": "",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system@1.2.3",
            "properties": [
              {
                "key": "source",
                "value": 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
              'tarball#sha1-ux/eKKZxz2ojD4icjhvReee++74='
              },
              {
                "key": "dependency_file",
                "value": "package-lock.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/%40magi-core/prediction@0.0.1",
            "type": "library",
            "group": "",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction@0.0.1",
            "properties": [
              {
                "key": "source",
                "value": 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
              'tarball#sha1-ux/EyKzTRzvejDFis90vRLj8++74='
              },
              {
                "key": "dependency_file",
                "value": "package-lock.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/classnames@2.2.5",
            "type": "library",
            "group": "",
            "name": "classnames",
            "version": "2.2.5",
            "purl": "pkg:npm/classnames@2.2.5",
            "properties": [
              {
                "key": "source",
                "value": 'https://registry.npmjs.org/classnames/-/classnames-2.2.5.tgz'\
              '#sha1-+zgB1FNGdknvNgPH1hoCvRKb3m0='
              },
              {
                "key": "dependency_file",
                "value": "package-lock.json"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/mobx@3.2.1",
            "type": "library",
            "group": "",
            "name": "mobx",
            "version": "3.2.1",
            "purl": "pkg:npm/mobx@3.2.1",
            "properties": [
              {
                "key": "source",
                "value": 'https://registry.npmjs.org/mobx/-/mobx-3.2.1.tgz'\
              '#sha1-aureASDMP3i6pXGVAxYwoK6PE88='
              },
              {
                "key": "dependency_file",
                "value": "package-lock.json"
              }
            ]
          }
        ]
      )
    end

    it 'should report all the deps in the yarn.lock if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "bom-ref": "pkg:npm/%40nerv-hq/control-system@1.2.3",
            "type": "library",
            "group": "",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system@1.2.3",
            "properties": [
              {
                "key": "source",
                "value": 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
              'tarball#fb3801d453467639ef560fc7a61a02bd129bde6d'
              },
              {
                "key": "dependency_file",
                "value": "yarn.lock"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/%40magi-core/prediction@0.0.1",
            "type": "library",
            "group": "",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction@0.0.1",
            "properties": [
              {
                "key": "source",
                "value": 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
              'tarball#fb3801d453467639ef5602c7a51a02fd129bbbbd'
              },
              {
                "key": "dependency_file",
                "value": "yarn.lock"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/classnames@2.2.5",
            "type": "library",
            "group": "",
            "name": "classnames",
            "version": "2.2.5",
            "purl": "pkg:npm/classnames@2.2.5",
            "properties": [
              {
                "key": "source",
                "value": 'https://registry.yarnpkg.com/classnames/-/classnames-2.2.5.tgz'\
              '#fb3801d453467649ef3603c7d61a02bd129bde6d'
              },
              {
                "key": "dependency_file",
                "value": "yarn.lock"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/mobx@3.2.1",
            "type": "library",
            "group": "",
            "name": "mobx",
            "version": "3.2.1",
            "purl": "pkg:npm/mobx@3.2.1",
            "properties": [
              {
                "key": "source",
                "value": 'https://registry.yarnpkg.com/mobx/-/mobx-3.2.1.tgz'\
              '#6aeade0120cc3f78baa57195031630a0ae8f13cf'
              },
              {
                "key": "dependency_file",
                "value": "yarn.lock"
              }
            ]
          },
          {
            "bom-ref": "pkg:npm/eslint-plugin-internal@0.0.0",
            "type": "library",
            "group": "",
            "name": "eslint-plugin-internal",
            "version": "0.0.0",
            "purl": "pkg:npm/eslint-plugin-internal@0.0.0",
            "properties": [
              {
                "key": "source",
                "value": 'file:./lib/lint-rules'
              },
              {
                "key": "dependency_file",
                "value": "yarn.lock"
              }
            ]
          }
        ]
      )
    end

    it 'should report all the deps in the bower.json if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/bower_json')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "bom-ref": "pkg:npm/lodash@3.0.0",
             "type": "library",
             "group": "",
             "name": "lodash",
             "version": "3.0.0",
             "purl": "pkg:npm/lodash@3.0.0",
             "properties": [
               {
                 "key": "source",
                 "value": "https://registry.bower.io"
               },
               {
                 "key": "dependency_file",
                 "value": "bower.json"
               }
             ]
          },
          {
            "bom-ref": "pkg:npm/angular@1.3.0",
             "type": "library",
             "group": "",
             "name": "angular",
             "version": "1.3.0",
             "purl": "pkg:npm/angular@1.3.0",
             "properties": [
               {
                 "key": "source",
                 "value": "https://registry.bower.io"
               },
               {
                 "key": "dependency_file",
                 "value": "bower.json"
               }
             ]
          },
          {
            "bom-ref": "pkg:npm/axios@0.17.0",
             "type": "library",
             "group": "",
             "name": "axios",
             "version": "0.17.0",
             "purl": "pkg:npm/axios@0.17.0",
             "properties": [
               {
                 "key": "source",
                 "value": "https://registry.bower.io"
               },
               {
                 "key": "dependency_file",
                 "value": "bower.json"
               }
             ]
          },
          {
            "bom-ref": "pkg:npm/angular-ui-router@0.2.13",
             "type": "library",
             "group": "",
             "name": "angular-ui-router",
             "version": "0.2.13",
             "purl": "pkg:npm/angular-ui-router@0.2.13",
             "properties": [
               {
                 "key": "source",
                 "value": "https://registry.bower.io"
               },
               {
                 "key": "dependency_file",
                 "value": "bower.json"
               }
             ]
          }
        ]
      )
    end
  end
end
