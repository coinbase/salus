require_relative '../../../spec_helper.rb'

describe Salus::Scanners::ReportNodeModules do
  describe '#run' do
    it 'should throw an error if package.json and friends are absent' do
      repo = Salus::Repo.new('spec/fixtures/blank_repository')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})

      expect { scanner.run }.to raise_error(
        Salus::Scanners::Base::InvalidScannerInvocationError,
        'Cannot report on Node modules without package.json, '\
          'package-lock.json or yarn.lock files.'
      )
    end

    it 'should report all the deps in package.json file in the absence of a lockfile' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      info = scanner.report.to_h.fetch(:info)

      expect(info[:package_json_node_version]).to eq('>= 6.9')
      expect(info[:package_json_npm_version]).to eq('>= 4.0.0')

      expect(info[:dependencies]).to match_array(
        [
          {
            dependency_file: 'package.json',
            type: 'node_module',
            name: '@nerv-hq/control-system',
            version: '1.2.3',
            source: 'https://npm.hq.nerv.net'
          },
          {
            dependency_file: 'package.json',
            type: 'node_module',
            name: '@magi-core/prediction',
            version: '0.0.1',
            source: 'https://npm.magi.nerv.net'
          },
          {
            dependency_file: 'package.json',
            type: 'node_module',
            name: 'classnames',
            version: '^2.2.5',
            source: '<package manager default>'
          },
          {
            dependency_file: 'package.json',
            type: 'node_module',
            name: 'mobx',
            version: '^3.2.1',
            source: '<package manager default>'
          }
        ]
      )
    end

    it 'should report all deps from package-lock.json, if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      info = scanner.report.to_h.fetch(:info)

      expect(info[:package_lock_version]).to eq('1')

      expect(info[:dependencies]).to match_array(
        [
          {
            dependency_file: 'package-lock.json',
            type: 'node_module',
            name: '@nerv-hq/control-system',
            version: '1.2.3',
            source: 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
              'tarball#sha1-ux/eKKZxz2ojD4icjhvReee++74='
          },
          {
            dependency_file: 'package-lock.json',
            type: 'node_module',
            name: '@magi-core/prediction',
            version: '0.0.1',
            source: 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
              'tarball#sha1-ux/EyKzTRzvejDFis90vRLj8++74='
          },
          {
            dependency_file: 'package-lock.json',
            type: 'node_module',
            name: 'classnames',
            version: '2.2.5',
            source: 'https://registry.npmjs.org/classnames/-/classnames-2.2.5.tgz'\
              '#sha1-+zgB1FNGdknvNgPH1hoCvRKb3m0='
          },
          {
            dependency_file: 'package-lock.json',
            type: 'node_module',
            name: 'mobx',
            version: '3.2.1',
            source: 'https://registry.npmjs.org/mobx/-/mobx-3.2.1.tgz'\
              '#sha1-aureASDMP3i6pXGVAxYwoK6PE88='
          }
        ]
      )
    end

    it 'should report all deps from yarn.lock, if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})

      scanner.run

      info = scanner.report.to_h.fetch(:info)

      expect(info[:dependencies]).to match_array(
        [
          {
            dependency_file: 'yarn.lock',
            type: 'node_module',
            name: '@nerv-hq/control-system',
            version: '1.2.3',
            source: 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
              'tarball#fb3801d453467639ef560fc7a61a02bd129bde6d'
          },
          {
            dependency_file: 'yarn.lock',
            type: 'node_module',
            name: '@magi-core/prediction',
            version: '0.0.1',
            source: 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
              'tarball#fb3801d453467639ef5602c7a51a02fd129bbbbd'
          },
          {
            dependency_file: 'yarn.lock',
            type: 'node_module',
            name: 'classnames',
            version: '2.2.5',
            source: 'https://registry.yarnpkg.com/classnames/-/classnames-2.2.5.tgz'\
              '#fb3801d453467649ef3603c7d61a02bd129bde6d'
          },
          {
            dependency_file: 'yarn.lock',
            type: 'node_module',
            name: 'mobx',
            version: '3.2.1',
            source: 'https://registry.yarnpkg.com/mobx/-/mobx-3.2.1.tgz'\
              '#6aeade0120cc3f78baa57195031630a0ae8f13cf'
          },
          {
            dependency_file: 'yarn.lock',
            type: 'node_module',
            name: 'eslint-plugin-internal',
            version: '0.0.0',
            source: 'file:./lib/lint-rules'
          }
        ]
      )
    end
  end

  it 'should report all the deps in bower.json, if present' do
    repo = Salus::Repo.new('spec/fixtures/report_node_modules/bower_json')
    scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
    scanner.run

    info = scanner.report.to_h.fetch(:info)

    expect(info[:dependencies]).to match_array(
      [
        {
          dependency_file: 'bower.json',
          type: 'node_module',
          name: 'lodash',
          version: '3.0.0',
          source: 'https://registry.bower.io'
        },
        {
          dependency_file: 'bower.json',
          type: 'node_module',
          name: 'angular',
          version: '1.3.0',
          source: 'https://registry.bower.io'
        },
        {
          dependency_file: 'bower.json',
          type: 'node_module',
          name: 'axios',
          version: '0.17.0',
          source: 'https://registry.bower.io'
        },
        {
          dependency_file: 'bower.json',
          type: 'node_module',
          name: 'angular-ui-router',
          version: '0.2.13',
          source: 'https://registry.bower.io'
        }
      ]
    )
  end

  describe '#should_run?' do
    context 'no relevant node dependency files present' do
      it 'should return false' do
        repo = Salus::Repo.new('spec/fixtures/blank_repository')
        expect(repo.package_json_present?).to eq(false)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
        expect(scanner.should_run?).to eq(false)
      end
    end

    context 'package.json is present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
        expect(scanner.should_run?).to eq(true)
      end
    end

    context 'package.json and package-lock.json are present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(true)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
        expect(scanner.should_run?).to eq(true)
      end
    end

    context 'package.json and yarn.lock are present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(true)
        scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
        expect(scanner.should_run?).to eq(true)
      end
    end
  end

  describe '#version_valid?' do
    context 'scanner version is valid' do
      it 'should return true' do
        repo = Salus::Repo.new("dir")
        scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
        expect(scanner.version).to eq('')
      end
    end
  end

  describe '#supported_languages' do
    context 'should return supported languages' do
      it 'should return expected langs' do
        langs = Salus::Scanners::ReportNodeModules.supported_languages
        expect(langs).to eq(['javascript'])
      end
    end
  end
end
